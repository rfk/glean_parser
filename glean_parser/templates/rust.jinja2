/*
 * AUTOGENERATED BY glean_parser.  DO NOT EDIT.
 */
{# The rendered markdown is autogenerated, but this
Jinja2 template is not. Please file bugs! #}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
#[allow(dead_code)]

{% for category_name in categories %}
pub mod {{ category_name }} {
    use lazy_static::lazy_static;
    use rc_glean::{ CommonMetricData, Lifetime, TimeUnit };
    {% for obj_type in obj_types %}
    use rc_glean::{{ obj_type }};
    {% endfor %}

    {% for obj_name in categories[category_name] %}
    {% set obj = categories[category_name][obj_name] %}
    // {{ obj.description|wordwrap(wrapstring='\n    // ') }}
    lazy_static! {
        pub static ref {{ obj.name|upper }}: {{ obj|type_name }} = {
            {{ obj|type_name }}::new(
                {# Rust doesn't have keyword or default arguments, which means that     #}
                {# we have to list each argument correctly in order to the constructor. #}
                {# This doesn't seem sustainable across multiple metrics types; we      #}
                {# might need to instead consider e.g. builder pattern or similar..?    #}
                CommonMetricData {
                    name: {{ obj.name|rust }},
                    category: {{ obj.category|rust }},
                    send_in_pings: {{ obj.send_in_pings|rust }},
                    lifetime: {{ obj.lifetime|rust }},
                    disabled: {{ obj.disabled|rust }},
                    dynamic_label: None
                },
                {% if obj.time_unit is defined %}{{ obj.time_unit|rust }},{% endif %}
            )
        };
    }
    {% endfor %}
}
{% endfor %}
